package PCA_Shutoff_Logic
public
with PCA_Shutoff_Types, PCA_Shutoff_Properties, MAP_Properties, MAP_Error_Properties;

	process ICEpcaShutoffProcess
	features
		SpO2 : in event data port PCA_Shutoff_Types::SpO2;
		-- No ETCO2 thread / connection because it's a data port
		ETCO2 : in data port PCA_Shutoff_Types::ETCO2;
		RespiratoryRate : in event data port PCA_Shutoff_Types::RespiratoryRate;
		
		CapnographError : in event port;
		PulseOxError : in event port;
		
		CommandPumpNormal : out event data port PCA_Shutoff_Types::PumpNormalCommand;
	flows
		spo2_flow: flow path SpO2 -> CommandPumpNormal;
	properties
		MAP_Properties::Process_Type => logic;
		MAP_Properties::Component_Type => controller;
	annex EMV2 {** 
 		use types PCA_Shutoff_Errors;
		error propagations
			SpO2 : in propagation {SpO2ValueHigh};
			ETCO2 : in propagation {ETCO2ValueHigh};
			RespiratoryRate : in propagation {RespiratoryRateLow, RespiratoryRateHigh};
			CommandPumpNormal : out propagation {InadvertentPumpNormally};
			flows
				HighSpO2LeadsToOD : error path SpO2{SpO2ValueHigh} -> CommandPumpNormal{InadvertentPumpNormally};
				HighETCO2LeadsToOD : error path ETCO2{ETCO2ValueHigh} -> CommandPumpNormal{InadvertentPumpNormally};
				LowRRLeadsToOD : error path RespiratoryRate{RespiratoryRateLow, RespiratoryRateHigh} -> CommandPumpNormal{InadvertentPumpNormally};
		end propagations;
--		properties
--			MAP_Error_Properties::ProtoHazard => [
--				Harm => PCA_Shutoff_Error_Properties::PatientDeath;
--				ComponentState => reference(PumpNormal);
--				EnvironmentState => reference(Risk);
--				InteractionPoints => (reference(SpO2), reference(ETCO2)); 
--			];
	**};
	end ICEpcaShutoffProcess;

	process implementation ICEpcaShutoffProcess.imp
	subcomponents
		UpdateSpO2Thread : thread UpdateSpO2Thread.imp;
		UpdateRespiratoryRateThread : thread UpdateRespiratoryRateThread.imp;
		PumpControlThread : thread PumpControlThread.imp;
		
		CapnographErrorThread : thread CapnographErrorThread.imp;
		PulseOxErrorThread : thread PulseOxErrorThread.imp;
	connections
		incoming_spo2 : port SpO2 -> UpdateSpO2Thread.SpO2;
		incoming_rr : port RespiratoryRate -> UpdateRespiratoryRateThread.RespiratoryRate;
		outgoing_pump_command : port PumpControlThread.PumpNormal -> CommandPumpNormal;
		
		incoming_capnograph_error : port CapnographError -> CapnographErrorThread.CapnographError;
		incoming_pulseox_error : port PulseOxError -> PulseOxErrorThread.PulseOxError;
	annex EMV2 {**
		use types PCA_Shutoff_Errors;
		properties
			MAP_Error_Properties::Occurrence => [
				Kind => Providing; 
				ViolatedConstraint => PCA_Shutoff_Error_Properties::DontLetPumpRunWhenUnsafe;
				Title => "High Physio Params";
				Cause => [
					ErrorType => reference(InadvertentPumpNormally);
					Description => "One or more physiological parameters are too high, leading the app logic to incorrectly believe the patient is healthy";
				];
				Compensation => "Physiological values are cross-checked with others";
			] applies to outgoing_pump_command;
	**};
	end ICEpcaShutoffProcess.imp;
	
	thread UpdateSpO2Thread
	features
		SpO2 : in event data port PCA_Shutoff_Types::SpO2;
	end UpdateSpO2Thread;
	
	thread implementation UpdateSpO2Thread.imp
	end UpdateSpO2Thread.imp;
	
	thread UpdateRespiratoryRateThread
	features
		RespiratoryRate : in event data port PCA_Shutoff_Types::RespiratoryRate;
	end UpdateRespiratoryRateThread;

	thread implementation UpdateRespiratoryRateThread.imp
	end UpdateRespiratoryRateThread.imp;
	
	thread PumpControlThread
	features
		PumpNormal : out event data port PCA_Shutoff_Types::PumpNormalCommand;
	properties
		Thread_Properties::Dispatch_Protocol => Periodic;
	end PumpControlThread;

	thread implementation PumpControlThread.imp
	end PumpControlThread.imp;

	thread CapnographErrorThread
	features
		CapnographError : in event port;
	end CapnographErrorThread;
	
	thread implementation CapnographErrorThread.imp
	end CapnographErrorThread.imp;
	
	thread PulseOxErrorThread
	features
		PulseOxError : in event port;
	end PulseOxErrorThread;

	thread implementation PulseOxErrorThread.imp
	end PulseOxErrorThread.imp;
	
end PCA_Shutoff_Logic;